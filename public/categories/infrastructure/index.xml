<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>infrastructure on Matias Pan&#39;s blog</title>
    <link>https://blog.matiaspan.dev/categories/infrastructure/</link>
    <description>Recent content in infrastructure on Matias Pan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Nov 2023 00:00:00 -0300</lastBuildDate><atom:link href="https://blog.matiaspan.dev/categories/infrastructure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Dagger: Building a CI/CD pipeline for IaC</title>
      <link>https://blog.matiaspan.dev/posts/exploring-dagger-building-a-ci-cd-pipeline-for-iac/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/exploring-dagger-building-a-ci-cd-pipeline-for-iac/</guid>
      <description>Dagger is a new tool that promises to fix the yaml and custom scripts mess that CI/CD currently is by building pipelines as code with one of the supported SDKs. I&amp;rsquo;m in the process of learning this tool, understanding where it may fall short and where it shines and I decided that sharing some of the exploration I do and the learnings it leaves me with would be useful. This is the first post in a series of blog posts that look at Dagger from different perspectives.</description>
    </item>
    
    <item>
      <title>How services are provisioned, deployed and operated at Lemon Cash</title>
      <link>https://blog.matiaspan.dev/posts/how-services-are-provisioned-and-deployed-at-lemoncash/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/how-services-are-provisioned-and-deployed-at-lemoncash/</guid>
      <description>Lemon Cash is a crypto startup based in Argentina that operates digital wallets, card payments and more. In this blog post I describe how we implemented a solution for provisioning, deploying and operating services that empowers developers to ship more quickly. This solution is not a fully fledged platform but it provides similar benefits by standing on top of strongly defined concepts and conventions. What we implemented only makes sense in the context in which the company was in, so I will start by explaining what that context was.</description>
    </item>
    
    <item>
      <title>Writing a face detection function for OpenFaaS</title>
      <link>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</guid>
      <description>There is a new term in town that has been making its way to all of us for a couple of years now: Serverless. When I first heard this I was kind of confused as to what it meant. Everybody seemed to have an opinion about it but there were no real answers. The following definition from serverless-stack helped me clarify a bit:
Serverless computing (or serverless for short), is an execution model where the cloud provider is responsible for executing a piece of code by dynamically allocating the resources.</description>
    </item>
    
    <item>
      <title>Deploying Gogs to a DigitalOcean Kubernetes cluster</title>
      <link>https://blog.matiaspan.dev/posts/deploying-gogs-to-a-custom-kubernetes-cluster/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/deploying-gogs-to-a-custom-kubernetes-cluster/</guid>
      <description>In this post I will show step by step how to create a Kubernetes cluster on DigitalOcean and then deploy Gogs to the cluster using a set of tools that automate all this.
Creating the Cluster Choosing the Cloud Provider I chose DigitalOcean as the cloud provider since it&amp;rsquo;s the cheapest I could find and it has worked really well for me in the past, plus I was already familiar with a few of their products.</description>
    </item>
    
  </channel>
</rss>
