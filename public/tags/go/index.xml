<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>go on Matias Pan&#39;s blog</title>
    <link>https://blog.matiaspan.dev/tags/go/</link>
    <description>Recent content in go on Matias Pan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Nov 2023 00:00:00 -0300</lastBuildDate><atom:link href="https://blog.matiaspan.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Dagger: Building a CI/CD pipeline for IaC</title>
      <link>https://blog.matiaspan.dev/posts/exploring-dagger-building-a-ci-cd-pipeline-for-iac/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/exploring-dagger-building-a-ci-cd-pipeline-for-iac/</guid>
      <description>Dagger is a new tool that promises to fix the yaml and custom scripts mess that CI/CD currently is by building pipelines as code with one of the supported SDKs. I&amp;rsquo;m in the process of learning this tool, understanding where it may fall short and where it shines and I decided that sharing some of the exploration I do and the learnings it leaves me with would be useful. This is the first post in a series of blog posts that look at Dagger from different perspectives.</description>
    </item>
    
    <item>
      <title>How services are provisioned, deployed and operated at Lemon Cash</title>
      <link>https://blog.matiaspan.dev/posts/how-services-are-provisioned-and-deployed-at-lemoncash/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/how-services-are-provisioned-and-deployed-at-lemoncash/</guid>
      <description>Lemon Cash is a crypto startup based in Argentina that operates digital wallets, card payments and more. In this blog post I describe how we implemented a solution for provisioning, deploying and operating services that empowers developers to ship more quickly. This solution is not a fully fledged platform but it provides similar benefits by standing on top of strongly defined concepts and conventions. What we implemented only makes sense in the context in which the company was in, so I will start by explaining what that context was.</description>
    </item>
    
    <item>
      <title>Fast JSON parsing in Go for OpenRTB</title>
      <link>https://blog.matiaspan.dev/posts/fast-json-parsing-for-open-rtb/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/fast-json-parsing-for-open-rtb/</guid>
      <description>The code used for this test can be found here.
TL;DR: when looking into overall performance and usability, json-iter is the clear winner. It gives roughly a 4x improvement over encoding/json and 1.2x over the second most performant option. It is also extremely easy to use. You simply need to import it, define a global variable (that you can call json to make it even easier) and then use it like you would use encoding/json.</description>
    </item>
    
    <item>
      <title>Writing a face detection function for OpenFaaS</title>
      <link>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</guid>
      <description>There is a new term in town that has been making its way to all of us for a couple of years now: Serverless. When I first heard this I was kind of confused as to what it meant. Everybody seemed to have an opinion about it but there were no real answers. The following definition from serverless-stack helped me clarify a bit:
Serverless computing (or serverless for short), is an execution model where the cloud provider is responsible for executing a piece of code by dynamically allocating the resources.</description>
    </item>
    
    <item>
      <title>Tracking color objects with GoCV</title>
      <link>https://blog.matiaspan.dev/posts/box-tracking-with-gocv/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/box-tracking-with-gocv/</guid>
      <description>Disclaimer: this blog post is just a port of Adrian&amp;rsquo;s tutorial at pyimagesearch where he shows how to track a ball using Python and OpenCV. I only changed a few things here and there and rewrote it using Go and GoCV. So all the credit should go to him
I always prefer to start by showing what you&amp;rsquo;ll get if you stick to the end, so here it goes:
Hooked? Awesome.</description>
    </item>
    
    <item>
      <title>Motion tracking turret with Gobot and GoCV - Part 1</title>
      <link>https://blog.matiaspan.dev/posts/motion-tracking-turret-with-gobot-and-gocv/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 -0300</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/motion-tracking-turret-with-gobot-and-gocv/</guid>
      <description>The title says it, motion tracking turret using only Go, ready to have some func?
This blog post will be divided into three main parts: Motion detection with GoCV, Controlling servo motors with Gobot and Putting it all together. In the first part, we build a lightweight motion detection algorithm that can run on low-power devices such as the RPi. In the second part we will show how to control servo motors with Gobot from the Raspberry Pi and in the last part we&amp;rsquo;ll explain how to go from detecting an object on an image to telling exactly the angles in which the servos need to move in order to track it.</description>
    </item>
    
  </channel>
</rss>
